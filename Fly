local RunService = game:GetService("RunService")

local Main = {}

Main.Configuration = {
    Fly = false,        -- État initial du vol (false = désactivé)
    SpeedFly = 7.5,     -- Vitesse de vol
    KeyFly = "x"        -- Touche pour activer/désactiver le vol
}

local plr = game.Players.LocalPlayer
local mouse = plr:GetMouse()
local localplayer = plr

if workspace:FindFirstChild("Core") then
    workspace.Core:Destroy()
end

local Core = Instance.new("Part")
Core.Name = "Core"
Core.Size = Vector3.new(0.05, 0.05, 0.05)

spawn(function()
    Core.Parent = workspace
    local Weld = Instance.new("Weld", Core)
    Weld.Part0 = Core
    local torsoName = "HumanoidRootPart"
    
    if localplayer.Character:FindFirstChild("Torso") then
        torsoName = "Torso"
    elseif localplayer.Character:FindFirstChild("UpperTorso") then
        torsoName = "UpperTorso"
    elseif localplayer.Character:FindFirstChild("LowerTorso") then
        torsoName = "LowerTorso"
    end
    
    Weld.Part1 = localplayer.Character[torsoName]
    Weld.C0 = CFrame.new(0, 0, 0)
end)

workspace:WaitForChild("Core")

local torso = workspace.Core
local keys = {a=false, d=false, w=false, s=false}
local e1, e2
local flying = false
local speed = Main.Configuration.SpeedFly

local function stop()
    flying = false
    Main.Configuration.Fly = false
end

local function start()
    flying = true
    local pos = Instance.new("BodyPosition", torso)
    local gyro = Instance.new("BodyGyro", torso)
    pos.Name = "EPIXPOS"
    pos.maxForce = Vector3.new(math.huge, math.huge, math.huge)
    pos.position = torso.Position
    gyro.maxTorque = Vector3.new(9e9, 9e9, 9e9)
    gyro.cframe = torso.CFrame
    
    repeat
        RunService.Heartbeat:Wait()
        localplayer.Character.Humanoid.PlatformStand = true
        local new = gyro.cframe - gyro.cframe.p + pos.position
        
        if not keys.w and not keys.s and not keys.a and not keys.d then
            speed = 0
            new = gyro.cframe - gyro.cframe.p + torso.Position
        else
            speed = Main.Configuration.SpeedFly
        end
        
        if keys.w then
            new = new + workspace.CurrentCamera.CoordinateFrame.lookVector * speed
        end
        if keys.s then
            new = new - workspace.CurrentCamera.CoordinateFrame.lookVector * speed
        end
        if keys.d then
            new = new * CFrame.new(speed, 0, 0)
        end
        if keys.a then
            new = new * CFrame.new(-speed, 0, 0)
        end
        
        pos.position = new.p
        gyro.cframe = workspace.CurrentCamera.CoordinateFrame
    until not Main.Configuration.Fly

    if gyro then gyro:Destroy() end
    if pos then pos:Destroy() end
    localplayer.Character.Humanoid.PlatformStand = false
end

-- Écoute dynamique de la touche KeyFly
local function setupKeyListener()
    if e1 then e1:Disconnect() end
    if e2 then e2:Disconnect() end

    e1 = mouse.KeyDown:Connect(function(key)
        if not torso or not torso.Parent then stop() e1:Disconnect() e2:Disconnect() return end
        
        if key == "w" then
            keys.w = true
        elseif key == "s" then
            keys.s = true
        elseif key == "a" then
            keys.a = true
        elseif key == "d" then
            keys.d = true
        elseif key:lower() == Main.Configuration.KeyFly:lower() then
            Main.Configuration.Fly = not Main.Configuration.Fly
        end
    end)

    e2 = mouse.KeyUp:Connect(function(key)
        if key == "w" then
            keys.w = false
        elseif key == "s" then
            keys.s = false
        elseif key == "a" then
            keys.a = false
        elseif key == "d" then
            keys.d = false
        end
    end)
end

-- Boucle pour surveiller les changements de Fly et KeyFly
spawn(function()
    local lastKey = Main.Configuration.KeyFly
    while true do
        RunService.Heartbeat:Wait()
        
        -- Si la touche de vol a changé, on met à jour les listeners
        if Main.Configuration.KeyFly ~= lastKey then
            lastKey = Main.Configuration.KeyFly
            setupKeyListener()
        end

        -- Si Fly change, on active/désactive dynamiquement
        if Main.Configuration.Fly ~= flying then
            if Main.Configuration.Fly then
                start()
            else
                stop()
            end
        end
    end
end)

-- Initialisation des touches
setupKeyListener()

return Main
